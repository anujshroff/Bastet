name: 'Build'
description: 'Build'
inputs:
  CONFIGURATION:
    required: false
    default: 'Release'
  DOTNET_CORE_VERSION: 
    required: false
    default: '9.x'
  GITHUB_TOKEN:
    required: true
  
runs:
  using: 'composite'
  steps:
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.DOTNET_CORE_VERSION }}

    - name: Run Branch Release Versioning
      id: nextversion
      uses: ./.github/actions/versioning

    - name: Build
      run: dotnet build --configuration ${{ inputs.CONFIGURATION }} /p:Version=${{ steps.nextversion.outputs.VERSION }} /p:AssemblyVersion=${{ steps.nextversion.outputs.ASSEMBLYSEMVER }}
      shell: bash

    - name: Test
      run: dotnet test --configuration ${{ inputs.CONFIGURATION }} --no-build
      shell: bash

    - name: Publish
      run: |
        dotnet publish ${{ github.workspace }}/src/Bastet --configuration ${{ inputs.CONFIGURATION }} --no-build --output ${{ github.workspace }}/publish
      shell: bash

    - name: Docker Build
      run: |
          # Login to Docker registry
          echo "${{ inputs.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Get current branch version
          CURRENT_VERSION="${{ steps.nextversion.outputs.MAJOR }}.${{ steps.nextversion.outputs.MINOR }}"
          echo "Current branch version: $CURRENT_VERSION"
          
          # Get all release branches matching the numeric pattern
          git fetch origin
          # This grep pattern ensures we only get branches that match release/digits.digits
          ALL_BRANCHES=$(git branch -r | grep -E "origin/release/[0-9]+\.[0-9]+$" | sed 's/.*release\///' | sort -V)
          echo "All release branches: $ALL_BRANCHES"
          
          # Find highest version
          HIGHEST_VERSION=$(echo "$ALL_BRANCHES" | tail -n 1)
          echo "Highest branch version: $HIGHEST_VERSION"
          
          # Set up Docker tags
          DOCKER_TAGS="--tag=ghcr.io/${{ github.repository_owner }}/bastet:${{ steps.nextversion.outputs.VERSION }} --tag=ghcr.io/${{ github.repository_owner }}/bastet:${{ steps.nextversion.outputs.MAJOR }}.${{ steps.nextversion.outputs.MINOR }} --tag=ghcr.io/${{ github.repository_owner }}/bastet:${{ steps.nextversion.outputs.MAJOR }}"
          
          # Add latest tag if current branch is highest version or greater
          if [ "$(echo "$CURRENT_VERSION $HIGHEST_VERSION" | tr ' ' '\n' | sort -V | tail -n 1)" = "$CURRENT_VERSION" ]; then
            echo "This version ($CURRENT_VERSION) is greater than or equal to the highest branch version ($HIGHEST_VERSION). Adding 'latest' tag."
            DOCKER_TAGS="$DOCKER_TAGS --tag=ghcr.io/${{ github.repository_owner }}/bastet:latest"
          else
            echo "Not the highest version release branch. Skipping 'latest' tag."
          fi
          
          # Build and push Docker image
          docker build ${{ github.workspace }}/publish --file ${{ github.workspace }}/src/Bastet/Dockerfile $DOCKER_TAGS
          docker push -a ghcr.io/${{ github.repository_owner }}/bastet
      shell: bash

    - name: Push Git Tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@users.noreply.github.com"
        git tag v${{ steps.nextversion.outputs.VERSION }}
        git push origin v${{ steps.nextversion.outputs.VERSION }}
      shell: bash
